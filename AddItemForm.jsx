import { useState } from 'react';\nimport { X, Plus } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\nconst AddItemForm = ({ onSubmit, onClose, categories }) => {\n  const [formData, setFormData] = useState({\n    subcategoria: '',\n    descricao: '',\n    unidade: 'UNIDADE',\n    deposito: 0,\n    estoqueReal: 0,\n    mediaDiaria: 0,\n    prazoPedido: 15,\n    diasEstoque: '',\n    estoqueMinimo: 0,\n    status: 'OK'\n  });\n  \n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const unidades = [\n    'UNIDADE',\n    'PACOTE',\n    'CAIXA',\n    'ROLO',\n    'KIT',\n    'FARDO',\n    'LITRO',\n    'KG'\n  ];\n\n  const statusOptions = [\n    'OK',\n    'ALERTA',\n    'REALIZAR PEDIDO'\n  ];\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Limpar erro do campo quando o usuário começar a digitar\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: null\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.descricao.trim()) {\n      newErrors.descricao = 'Descrição é obrigatória';\n    }\n    \n    if (!formData.subcategoria.trim()) {\n      newErrors.subcategoria = 'Categoria é obrigatória';\n    }\n    \n    if (formData.deposito < 0) {\n      newErrors.deposito = 'Quantidade no depósito deve ser positiva';\n    }\n    \n    if (formData.estoqueReal < 0) {\n      newErrors.estoqueReal = 'Estoque real deve ser positivo';\n    }\n    \n    if (formData.mediaDiaria < 0) {\n      newErrors.mediaDiaria = 'Média diária deve ser positiva';\n    }\n    \n    if (formData.prazoPedido <= 0) {\n      newErrors.prazoPedido = 'Prazo para pedido deve ser maior que zero';\n    }\n    \n    if (formData.estoqueMinimo < 0) {\n      newErrors.estoqueMinimo = 'Estoque mínimo deve ser positivo';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    setSubmitting(true);\n    \n    try {\n      // Calcular dias de estoque se possível\n      let diasEstoque = '';\n      if (formData.mediaDiaria > 0) {\n        diasEstoque = Math.floor(formData.estoqueReal / formData.mediaDiaria).toString();\n      } else {\n        diasEstoque = '#DIV/0!';\n      }\n      \n      const itemData = {\n        ...formData,\n        diasEstoque\n      };\n      \n      const success = await onSubmit(itemData);\n      \n      if (success) {\n        // Reset form\n        setFormData({\n          subcategoria: '',\n          descricao: '',\n          unidade: 'UNIDADE',\n          deposito: 0,\n          estoqueReal: 0,\n          mediaDiaria: 0,\n          prazoPedido: 15,\n          diasEstoque: '',\n          estoqueMinimo: 0,\n          status: 'OK'\n        });\n      }\n    } catch (error) {\n      console.error('Erro ao adicionar item:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Plus className=\"h-5 w-5\" />\n            <span>Adicionar Novo Item</span>\n          </DialogTitle>\n          <DialogDescription>\n            Preencha as informações do novo item para adicionar ao estoque.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Descrição */}\n            <div className=\"md:col-span-2\">\n              <Label htmlFor=\"descricao\">Descrição do Produto *</Label>\n              <Input\n                id=\"descricao\"\n                value={formData.descricao}\n                onChange={(e) => handleInputChange('descricao', e.target.value)}\n                placeholder=\"Ex: AGUA MINERAL S/ GÁS 1,5\"\n                className={errors.descricao ? 'border-red-500' : ''}\n              />\n              {errors.descricao && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.descricao}</p>\n              )}\n            </div>\n            \n            {/* Categoria */}\n            <div>\n              <Label htmlFor=\"subcategoria\">Categoria *</Label>\n              <Select \n                value={formData.subcategoria} \n                onValueChange={(value) => handleInputChange('subcategoria', value)}\n              >\n                <SelectTrigger className={errors.subcategoria ? 'border-red-500' : ''}>\n                  <SelectValue placeholder=\"Selecione uma categoria\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((categoria) => (\n                    <SelectItem key={categoria} value={categoria}>\n                      {categoria}\n                    </SelectItem>\n                  ))}\n                  <SelectItem value=\"NOVA_CATEGORIA\">+ Nova Categoria</SelectItem>\n                </SelectContent>\n              </Select>\n              {formData.subcategoria === 'NOVA_CATEGORIA' && (\n                <Input\n                  className=\"mt-2\"\n                  placeholder=\"Digite o nome da nova categoria\"\n                  onChange={(e) => handleInputChange('subcategoria', e.target.value)}\n                />\n              )}\n              {errors.subcategoria && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.subcategoria}</p>\n              )}\n            </div>\n            \n            {/* Unidade */}\n            <div>\n              <Label htmlFor=\"unidade\">Unidade</Label>\n              <Select \n                value={formData.unidade} \n                onValueChange={(value) => handleInputChange('unidade', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {unidades.map((unidade) => (\n                    <SelectItem key={unidade} value={unidade}>\n                      {unidade}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Depósito */}\n            <div>\n              <Label htmlFor=\"deposito\">Quantidade no Depósito</Label>\n              <Input\n                id=\"deposito\"\n                type=\"number\"\n                min=\"0\"\n                value={formData.deposito}\n                onChange={(e) => handleInputChange('deposito', parseInt(e.target.value) || 0)}\n                className={errors.deposito ? 'border-red-500' : ''}\n              />\n              {errors.deposito && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.deposito}</p>\n              )}\n            </div>\n            \n            {/* Estoque Real */}\n            <div>\n              <Label htmlFor=\"estoqueReal\">Estoque Real</Label>\n              <Input\n                id=\"estoqueReal\"\n                type=\"number\"\n                min=\"0\"\n                value={formData.estoqueReal}\n                onChange={(e) => handleInputChange('estoqueReal', parseInt(e.target.value) || 0)}\n                className={errors.estoqueReal ? 'border-red-500' : ''}\n              />\n              {errors.estoqueReal && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.estoqueReal}</p>\n              )}\n            </div>\n            \n            {/* Média Diária */}\n            <div>\n              <Label htmlFor=\"mediaDiaria\">Média Diária de Consumo</Label>\n              <Input\n                id=\"mediaDiaria\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={formData.mediaDiaria}\n                onChange={(e) => handleInputChange('mediaDiaria', parseFloat(e.target.value) || 0)}\n                className={errors.mediaDiaria ? 'border-red-500' : ''}\n              />\n              {errors.mediaDiaria && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.mediaDiaria}</p>\n              )}\n            </div>\n            \n            {/* Prazo para Pedido */}\n            <div>\n              <Label htmlFor=\"prazoPedido\">Prazo para Pedido (dias)</Label>\n              <Input\n                id=\"prazoPedido\"\n                type=\"number\"\n                min=\"1\"\n                value={formData.prazoPedido}\n                onChange={(e) => handleInputChange('prazoPedido', parseInt(e.target.value) || 15)}\n                className={errors.prazoPedido ? 'border-red-500' : ''}\n              />\n              {errors.prazoPedido && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.prazoPedido}</p>\n              )}\n            </div>\n            \n            {/* Estoque Mínimo */}\n            <div>\n              <Label htmlFor=\"estoqueMinimo\">Estoque Mínimo</Label>\n              <Input\n                id=\"estoqueMinimo\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={formData.estoqueMinimo}\n                onChange={(e) => handleInputChange('estoqueMinimo', parseFloat(e.target.value) || 0)}\n                className={errors.estoqueMinimo ? 'border-red-500' : ''}\n              />\n              {errors.estoqueMinimo && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.estoqueMinimo}</p>\n              )}\n            </div>\n            \n            {/* Status */}\n            <div>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select \n                value={formData.status} \n                onValueChange={(value) => handleInputChange('status', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {statusOptions.map((status) => (\n                    <SelectItem key={status} value={status}>\n                      {status}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </form>\n        \n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} disabled={submitting}>\n            Cancelar\n          </Button>\n          <Button onClick={handleSubmit} disabled={submitting}>\n            {submitting ? 'Adicionando...' : 'Adicionar Item'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;


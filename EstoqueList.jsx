import { useState } from 'react';
import { Edit, Save, X, Package } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const StatusBadge = ({ status }) => {
  const variants = {\n    'OK': 'bg-green-100 text-green-800 border-green-200',\n    'ALERTA': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n    'REALIZAR PEDIDO': 'bg-red-100 text-red-800 border-red-200'\n  };\n\n  return (\n    <Badge className={`${variants[status] || 'bg-gray-100 text-gray-800'} border`}>\n      {status}\n    </Badge>\n  );\n};\n\nconst EstoqueItem = ({ item, onUpdate }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState(item);\n  const [saving, setSaving] = useState(false);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setEditData(item);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEditData(item);\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n    try {\n      const success = await onUpdate(item.id, editData);\n      if (success) {\n        setIsEditing(false);\n      }\n    } catch (error) {\n      console.error('Erro ao salvar:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    setEditData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  if (isEditing) {\n    return (\n      <Card className=\"mb-4\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Descrição</label>\n              <Input\n                value={editData.descricao}\n                onChange={(e) => handleInputChange('descricao', e.target.value)}\n                placeholder=\"Descrição do produto\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Categoria</label>\n              <Input\n                value={editData.subcategoria}\n                onChange={(e) => handleInputChange('subcategoria', e.target.value)}\n                placeholder=\"Categoria\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Unidade</label>\n              <Input\n                value={editData.unidade}\n                onChange={(e) => handleInputChange('unidade', e.target.value)}\n                placeholder=\"Unidade\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Depósito</label>\n              <Input\n                type=\"number\"\n                value={editData.deposito}\n                onChange={(e) => handleInputChange('deposito', parseInt(e.target.value) || 0)}\n                placeholder=\"Quantidade no depósito\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Estoque Real</label>\n              <Input\n                type=\"number\"\n                value={editData.estoqueReal}\n                onChange={(e) => handleInputChange('estoqueReal', parseInt(e.target.value) || 0)}\n                placeholder=\"Estoque real\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Média Diária</label>\n              <Input\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.mediaDiaria}\n                onChange={(e) => handleInputChange('mediaDiaria', parseFloat(e.target.value) || 0)}\n                placeholder=\"Média diária\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Prazo Pedido (dias)</label>\n              <Input\n                type=\"number\"\n                value={editData.prazoPedido}\n                onChange={(e) => handleInputChange('prazoPedido', parseInt(e.target.value) || 15)}\n                placeholder=\"Prazo para pedido\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Status</label>\n              <Select \n                value={editData.status} \n                onValueChange={(value) => handleInputChange('status', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"OK\">OK</SelectItem>\n                  <SelectItem value=\"ALERTA\">ALERTA</SelectItem>\n                  <SelectItem value=\"REALIZAR PEDIDO\">REALIZAR PEDIDO</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 mt-4\">\n            <Button variant=\"outline\" onClick={handleCancel} disabled={saving}>\n              <X className=\"h-4 w-4 mr-2\" />\n              Cancelar\n            </Button>\n            <Button onClick={handleSave} disabled={saving}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {saving ? 'Salvando...' : 'Salvar'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mb-4 hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center justify-between space-y-4 lg:space-y-0\">\n          <div className=\"flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <p className=\"font-semibold text-gray-900\">{item.descricao}</p>\n              <p className=\"text-sm text-gray-600\">{item.subcategoria}</p>\n            </div>\n            \n            <div>\n              <p className=\"text-sm text-gray-500\">Estoque Real</p>\n              <p className=\"font-semibold text-lg\">{item.estoqueReal} <span className=\"text-sm font-normal\">{item.unidade}</span></p>\n            </div>\n            \n            <div>\n              <p className=\"text-sm text-gray-500\">Depósito</p>\n              <p className=\"font-medium\">{item.deposito} <span className=\"text-sm font-normal\">{item.unidade}</span></p>\n            </div>\n            \n            <div>\n              <p className=\"text-sm text-gray-500\">Status</p>\n              <StatusBadge status={item.status} />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleEdit}>\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Editar\n            </Button>\n          </div>\n        </div>\n        \n        {/* Informações adicionais */}\n        <div className=\"mt-4 pt-4 border-t grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Média Diária:</span>\n            <span className=\"ml-2 font-medium\">{item.mediaDiaria}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Prazo Pedido:</span>\n            <span className=\"ml-2 font-medium\">{item.prazoPedido} dias</span>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Dias de Estoque:</span>\n            <span className=\"ml-2 font-medium\">{item.diasEstoque}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Estoque Mínimo:</span>\n            <span className=\"ml-2 font-medium\">{item.estoqueMinimo}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst EstoqueList = ({ items, onUpdateItem, loading }) => {\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <Package className=\"h-8 w-8 animate-pulse mx-auto mb-4 text-gray-400\" />\n        <p className=\"text-gray-500\">Carregando itens...</p>\n      </div>\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nenhum item encontrado</h3>\n        <p className=\"text-gray-500\">Tente ajustar os filtros de busca ou adicione novos itens ao estoque.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">\n          {items.length} {items.length === 1 ? 'item encontrado' : 'itens encontrados'}\n        </h2>\n      </div>\n      \n      <div>\n        {items.map((item) => (\n          <EstoqueItem\n            key={item.id}\n            item={item}\n            onUpdate={onUpdateItem}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default EstoqueList;


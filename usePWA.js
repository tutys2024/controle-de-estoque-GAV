import { useState, useEffect } from 'react';\n\nexport const usePWA = () => {\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [canInstall, setCanInstall] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [updateAvailable, setUpdateAvailable] = useState(false);\n\n  useEffect(() => {\n    // Check if app is already installed\n    const checkIfInstalled = () => {\n      if (window.matchMedia('(display-mode: standalone)').matches) {\n        setIsInstalled(true);\n      } else if (window.navigator.standalone === true) {\n        setIsInstalled(true);\n      }\n    };\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setCanInstall(true);\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setCanInstall(false);\n      setDeferredPrompt(null);\n      console.log('PWA foi instalado');\n    };\n\n    // Listen for online/offline events\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    // Listen for service worker updates\n    const handleServiceWorkerUpdate = () => {\n      setUpdateAvailable(true);\n    };\n\n    // Add event listeners\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check installation status\n    checkIfInstalled();\n\n    // Check for service worker updates\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('controllerchange', handleServiceWorkerUpdate);\n    }\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      \n      if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.removeEventListener('controllerchange', handleServiceWorkerUpdate);\n      }\n    };\n  }, []);\n\n  // Install PWA\n  const installPWA = async () => {\n    if (!deferredPrompt) return false;\n\n    try {\n      deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n        setCanInstall(false);\n        setDeferredPrompt(null);\n        return true;\n      } else {\n        console.log('User dismissed the install prompt');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error installing PWA:', error);\n      return false;\n    }\n  };\n\n  // Update PWA\n  const updatePWA = async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.getRegistration();\n        if (registration && registration.waiting) {\n          registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n          window.location.reload();\n        }\n      } catch (error) {\n        console.error('Error updating PWA:', error);\n      }\n    }\n  };\n\n  // Request notification permission\n  const requestNotificationPermission = async () => {\n    if ('Notification' in window) {\n      try {\n        const permission = await Notification.requestPermission();\n        return permission === 'granted';\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n        return false;\n      }\n    }\n    return false;\n  };\n\n  // Show notification\n  const showNotification = (title, options = {}) => {\n    if ('serviceWorker' in navigator && 'Notification' in window) {\n      if (Notification.permission === 'granted') {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.showNotification(title, {\n            body: options.body || '',\n            icon: '/icon-192x192.png',\n            badge: '/icon-192x192.png',\n            vibrate: [100, 50, 100],\n            ...options\n          });\n        });\n      }\n    }\n  };\n\n  // Get installation instructions based on browser\n  const getInstallInstructions = () => {\n    const userAgent = navigator.userAgent.toLowerCase();\n    \n    if (userAgent.includes('chrome') && !userAgent.includes('edg')) {\n      return {\n        browser: 'Chrome',\n        instructions: 'Clique no ícone de instalação na barra de endereço ou use o menu \"Instalar app\"'\n      };\n    } else if (userAgent.includes('firefox')) {\n      return {\n        browser: 'Firefox',\n        instructions: 'Clique no ícone de instalação na barra de endereço'\n      };\n    } else if (userAgent.includes('safari') && !userAgent.includes('chrome')) {\n      return {\n        browser: 'Safari',\n        instructions: 'Toque no botão \"Compartilhar\" e selecione \"Adicionar à Tela de Início\"'\n      };\n    } else if (userAgent.includes('edg')) {\n      return {\n        browser: 'Edge',\n        instructions: 'Clique no ícone de instalação na barra de endereço ou use o menu \"Apps\"'\n      };\n    } else {\n      return {\n        browser: 'Navegador',\n        instructions: 'Procure pela opção \"Instalar app\" ou \"Adicionar à tela inicial\" no menu do navegador'\n      };\n    }\n  };\n\n  return {\n    canInstall,\n    isInstalled,\n    isOnline,\n    updateAvailable,\n    installPWA,\n    updatePWA,\n    requestNotificationPermission,\n    showNotification,\n    getInstallInstructions\n  };\n};

